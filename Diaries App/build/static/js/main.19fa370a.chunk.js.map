{"version":3,"sources":["features/auth/authSlice.ts","images/Loading.gif","app/App.tsx","serviceWorker.ts","index.tsx","rootReducer.ts","store.ts","features/diary/diariesSlice.ts","features/entry/editorSlice.tsx","features/auth/userSlice.ts","features/entry/entriesSlice.ts"],"names":["auth","createSlice","name","initialState","token","isAuthenticated","reducers","saveToken","state","payload","clearToken","setAuthState","actions","module","exports","Auth","lazy","Home","App","isLoggedIn","useSelector","path","fallback","src","Loading","style","backgroundSize","backgroundAttachment","backgroundPosition","width","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","store","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","rootReducer","combineReducers","authReducer","diaries","diariesReducer","entries","entriesReducer","user","userReducer","editor","editorReducer","configureStore","reducer","useAppDispatch","useDispatch","addDiary","diariesToSave","filter","diary","findIndex","item","id","push","updateDiary","diaryIndex","splice","canEdit","currentlyEditing","activeDiaryId","setCanEdit","setCurrentlyEditing","setActiveDiaryId","setUser","setEntries","updateEntry","index","e"],"mappings":"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","file":"static/js/main.19fa370a.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\ninterface AuthState {\r\n  token: string | null;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\nconst initialState: AuthState = {\r\n  token: null,\r\n  isAuthenticated: false,\r\n};\r\n\r\nconst auth = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    saveToken(state, { payload }: PayloadAction<string>) {\r\n      if (payload) {\r\n        state.token = payload;\r\n      }\r\n    },\r\n    clearToken(state) {\r\n      state.token = null;\r\n    },\r\n    setAuthState(state, { payload }: PayloadAction<boolean>) {\r\n      state.isAuthenticated = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { saveToken, clearToken, setAuthState } = auth.actions;\r\n\r\nexport default auth.reducer;\r\n","module.exports = __webpack_public_path__ + \"static/media/Loading.18d85f10.gif\";","import React, { FC, lazy, Suspense } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../rootReducer';\r\nimport Loading from '../images/Loading.gif';\r\n\r\nconst Auth = lazy(() => import('../features/auth/Auth'));\r\nconst Home = lazy(() => import('../features/home/Home'));\r\n\r\nconst App: FC = () => {\r\n  const isLoggedIn = useSelector(\r\n    (state: RootState) => state.auth.isAuthenticated\r\n  );\r\n\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/\">\r\n          <Suspense\r\n            fallback={\r\n              <img\r\n                src={Loading}\r\n                style={{\r\n                  backgroundSize: 'cover',\r\n                  backgroundAttachment: 'fixed',\r\n                  backgroundPosition: \"center\",\r\n                  width: \"100%\",\r\n                  height: \"100%\"\r\n                }}\r\n              />\r\n            }\r\n          >\r\n            {isLoggedIn ? <Home /> : <Auth />}\r\n          </Suspense>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { setupServer } from './services/mirage/server';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nif (process.env.NODE_ENV === 'development') {\r\n  setupServer();\r\n}\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport authReducer from './features/auth/authSlice';\r\nimport userReducer from './features/auth/userSlice';\r\nimport diariesReducer from './features/diary/diariesSlice';\r\nimport entriesReducer from './features/entry/entriesSlice';\r\nimport editorReducer from './features/entry/editorSlice';\r\n\r\nconst rootReducer = combineReducers({\r\n  auth: authReducer,\r\n  diaries: diariesReducer,\r\n  entries: entriesReducer,\r\n  user: userReducer,\r\n  editor: editorReducer,\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport default rootReducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport rootReducer from './rootReducer';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer,\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n\r\nexport default store;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Diary } from '../../interfaces/diary.interface';\r\n\r\nconst diaries = createSlice({\r\n  name: 'diaries',\r\n  initialState: [] as Diary[],\r\n  reducers: {\r\n    addDiary(state, { payload }: PayloadAction<Diary[]>) {\r\n      const diariesToSave = payload.filter((diary) => {\r\n        return state.findIndex((item) => item.id === diary.id) === -1;\r\n      });\r\n      state.push(...diariesToSave);\r\n    },\r\n    updateDiary(state, { payload }: PayloadAction<Diary>) {\r\n      const { id } = payload;\r\n      const diaryIndex = state.findIndex((diary) => diary.id === id);\r\n      if (diaryIndex !== -1) {\r\n        state.splice(diaryIndex, 1, payload);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addDiary, updateDiary } = diaries.actions;\r\n\r\nexport default diaries.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Entry } from '../../interfaces/entry.interface';\r\n\r\ninterface EditorState {\r\n  canEdit: boolean;\r\n  currentlyEditing: Entry | null;\r\n  activeDiaryId: string | null;\r\n}\r\n\r\nconst initialState: EditorState = {\r\n  canEdit: false,\r\n  currentlyEditing: null,\r\n  activeDiaryId: null,\r\n};\r\n\r\nconst editor = createSlice({\r\n  name: 'editor',\r\n  initialState,\r\n  reducers: {\r\n    setCanEdit(state, { payload }: PayloadAction<boolean>) {\r\n      state.canEdit = payload != null ? payload : !state.canEdit;\r\n    },\r\n    setCurrentlyEditing(state, { payload }: PayloadAction<Entry | null>) {\r\n      state.currentlyEditing = payload;\r\n    },\r\n    setActiveDiaryId(state, { payload }: PayloadAction<string>) {\r\n      state.activeDiaryId = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setCanEdit,\r\n  setCurrentlyEditing,\r\n  setActiveDiaryId,\r\n} = editor.actions;\r\n\r\nexport default editor.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { User } from '../../interfaces/user.interface';\r\n\r\nconst user = createSlice({\r\n  name: 'user',\r\n  initialState: null as User | null,\r\n  reducers: {\r\n    setUser(state, { payload }: PayloadAction<User>) {\r\n      return (state = payload);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setUser } = user.actions;\r\n\r\nexport default user.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { Entry } from '../../interfaces/entry.interface';\r\n\r\nconst entries = createSlice({\r\n  name: 'entries',\r\n  initialState: [] as Entry[],\r\n  reducers: {\r\n    setEntries(state, { payload }: PayloadAction<Entry[] | null>) {\r\n      return (state = payload != null ? payload : []);\r\n    },\r\n    updateEntry(state, { payload }: PayloadAction<Entry>) {\r\n      const { id } = payload;\r\n      const index = state.findIndex((e) => e.id === id);\r\n      if (index !== -1) {\r\n        state.splice(index, 1, payload);\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setEntries, updateEntry } = entries.actions;\r\n\r\nexport default entries.reducer;\r\n"],"sourceRoot":""}